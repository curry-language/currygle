------------------------------------------------------------------------------
--- This module contains the settings of Currygle2, such as global constants,
--- like paths to files and directories, and URLs to which Currygle refers.
---
--- @author Helge Knof (with changes by Michael Hanus)
--- @version September 2025
------------------------------------------------------------------------------

module Settings
  where

import Data.List                ( isPrefixOf, split )
import Language.Curry.Resources ( curryPackagesDocURL )
import System.FilePath          ( (</>), splitExtension )

import PackageConfig ( packageVersion )

------------------------------------------------------------------------------
-- Some constants.

--- The version date of Currygle.
currygleDate :: String
currygleDate = "29/09/25"

--- The banner of Currygle.
currygleBanner :: String
currygleBanner = unlines [bannerLine, bannerText, bannerLine]
 where
  bannerText = "Currygle (Version " ++ packageVersion ++ " of " ++
               currygleDate ++ ")"
  bannerLine = take (length bannerText) (repeat '=')


--- The maximum amount of results returned by a search.
maxSearchResults :: Int
maxSearchResults = 50

indexItemFileName :: String
indexItemFileName = "IndexItems.txt"

descrTrieFileName :: String
descrTrieFileName = "DescrTrie.txt"

moduleTrieFileName :: String
moduleTrieFileName = "ModuleTrie.txt"

packageTrieFileName :: String
packageTrieFileName = "PackageTrie.txt"

functionTrieFileName :: String
functionTrieFileName = "FunctionTrie.txt"

typeTrieFileName :: String
typeTrieFileName = "TypesTrie.txt"

classTrieFileName :: String
classTrieFileName = "ClassTrie.txt"

authorTrieFileName :: String
authorTrieFileName = "AuthorTrie.txt"

detMapFileName :: String
detMapFileName = "DetMap.txt"

flexMapFileName :: String
flexMapFileName = "FlexMap.txt"

signatureTrieFileName :: String
signatureTrieFileName = "SignatureTrie.txt"

-- The directory where the index is generated by the Currygle indexer.
indexDirPath :: String
indexDirPath = "INDEX"

-- The standard socket used by the Currygle search server.
serverSocket :: Int
serverSocket = 12354

------------------------------------------------------------------------------
-- Some URLs to which Currygle refers.

--- Returns the URL of the online documentation for a package and module name.
moduleDocumentationUrl :: String -> String -> String
moduleDocumentationUrl packageid modname =
  curryPackagesDocURL ++ "/" ++ packageid ++ "/" ++ modname ++ ".html"

--- Returns the URL of the online documentation for a package version, module,
--- and entity name.
entityDocumentationUrl :: String -> String -> String -> String
entityDocumentationUrl packageid modname ename =
  moduleDocumentationUrl packageid modname ++ "#" ++ stripClassNamePrefix ename

--- Transforms a documentation URL into the URL of the source code.
--- Basically, add `_curry` before the `.html` extension.
docUrl2SourceCodeUrl :: String -> String
docUrl2SourceCodeUrl docurl =
  let (htmlpart,hashsuffix) = break (=='#') docurl
      (htmlbase,htmlext)    = splitExtension htmlpart
  in if htmlext == ".html"
       then htmlbase ++ "_curry" ++ htmlext ++ hashsuffix
       else ""

--- The base URL of the online analysis of Curry packages.
baseCurryInfoUrl :: String
baseCurryInfoUrl = "https://cpm.curry-lang.org/curry-info/HTML/packages/"

--- Returns the URL of the online analysis page for a package version, module,
--- and operation name.
operationAnalysisURL :: String -> String -> String -> String
operationAnalysisURL pkgid mname ename = case packageVersionOfPkgId pkgid of
  Nothing            -> ""
  Just (pname,pvers) -> baseCurryInfoUrl ++  pname ++ "/versions/" ++
                        pvers ++ "/modules/" ++ mname ++
                        "/operations/" ++ encodeFilePath ename ++ ".html"

--- The base directory of the online analysis pages on the server.
baseCurryInfoDir :: String
baseCurryInfoDir =
  "/var/www/vhosts/curry-lang.org/cpm.curry-lang.org/curry-info/HTML/packages"

--- Returns the file name of the online analysis page for a package version,
--- module, and operation name.
operationAnalysisFile :: String -> String -> String -> String
operationAnalysisFile pkgid mname ename = case packageVersionOfPkgId pkgid of
  Nothing            -> ""
  Just (pname,pvers) -> baseCurryInfoDir </> pname </> "versions" </>
                        pvers </> "modules" </> mname </>
                        "operations" </> encodeFilePath ename ++ ".html"

--- Is the identifier a class name?
isClassName :: String -> Bool
isClassName = isPrefixOf "_Dict#"

-- If a name is a class name, strips the internal class name prefix
-- to get the regular name of the class.
stripClassNamePrefix :: String -> String
stripClassNamePrefix name = if isClassName name then drop 6 name else name

------------------------------------------------------------------------------
-- Auxiliary operations.

-- Splits a string containing a package id into the package and version id.
packageVersionOfPkgId :: String -> Maybe (String,String)
packageVersionOfPkgId pid = splitPkgId "" pid
 where
  splitPkgId oldpn s =
    let (pname,hvers) = break (=='-') s
        newpn = if null oldpn then pname else oldpn ++ "-" ++ pname
    in if null hvers
         then Nothing
         else let vers = tail hvers
              in if isVersionId vers then Just (newpn,vers)
                                     else splitPkgId newpn vers

  isVersionId vs = case split (=='.') vs of
    (maj:min:patch:_) -> all (all isDigit) [maj, min, take 1 patch]
    _                 -> False

-- From CurryInfo implementation:
--- Encode a file path if it contains special characters with a hexadecimal
--- string encoding.
encodeFilePath :: String -> String
encodeFilePath s = if isSimpleID s then s
                                   else '_': concatMap (intToHex . ord) s
 where
  isSimpleID []     = False
  isSimpleID (x:xs) = isAlpha x && all (\c -> isAlphaNum c || c `elem` ".'_") xs

  intToHex i = reverse $ map (cs !!)
                              (map (flip mod 16)
                                   (takeWhile (> 0)
                                              (iterate (flip div 16) i)))
   where
    cs = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
          'A', 'B', 'C', 'D', 'E', 'F']

------------------------------------------------------------------------------
